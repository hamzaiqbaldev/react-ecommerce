{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyDUYN1xZVNRn4hPUnPDDN0_rUFqBp6GeVk\",\n  authDomain: \"react-clothing-store-2bafd.firebaseapp.com\",\n  databaseURL: \"https://react-clothing-store-2bafd.firebaseio.com\",\n  projectId: \"react-clothing-store-2bafd\",\n  storageBucket: \"react-clothing-store-2bafd.appspot.com\",\n  messagingSenderId: \"844483255354\",\n  appId: \"1:844483255354:web:ff6034cecb1610a6816903\",\n  measurementId: \"G-TWM731XF4H\"\n};\nfirebase.initializeApp(config);\nexport const tempRef = async () => {\n  const refT = firestore.doc('users/2vt1ZcezDGbmmxX8s7NV8UJVk072');\n  const snap = await refT.get();\n  console.log('snapppp');\n  console.log(snap);\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  console.log(userRef);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    alert('user snapshot does not exists');\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n      alert('user ref set after');\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["D:/react-learning/clothing-store/src/firebase/firebase.util.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","tempRef","refT","firestore","doc","snap","get","console","log","createUserProfileDocument","userAuth","additionalData","userRef","uid","snapShot","exists","alert","displayName","email","createdAt","Date","set","error","message","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,4CAFD;AAGXC,EAAAA,WAAW,EAAE,mDAHF;AAIXC,EAAAA,SAAS,EAAE,4BAJA;AAKXC,EAAAA,aAAa,EAAE,wCALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWET,QAAQ,CAACU,aAAT,CAAuBT,MAAvB;AAEA,OAAO,MAAMU,OAAO,GAAG,YAAY;AACjC,QAAMC,IAAI,GAAGC,SAAS,CAACC,GAAV,CAAc,oCAAd,CAAb;AACA,QAAMC,IAAI,GAAG,MAAMH,IAAI,CAACI,GAAL,EAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACD,CALM;AAOP,OAAO,MAAMI,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGT,SAAS,CAACC,GAAV,CAAe,SAAQM,QAAQ,CAACG,GAAI,EAApC,CAAhB;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAYI,OAAZ;AACA,QAAME,QAAQ,GAAG,MAAMF,OAAO,CAACN,GAAR,EAAvB;;AAEA,MAAI,CAACQ,QAAQ,CAACC,MAAd,EAAsB;AACpBC,IAAAA,KAAK,CAAC,+BAAD,CAAL;AACA,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBR,QAA/B;AACA,UAAMS,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMR,OAAO,CAACS,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGR;AAJa,OAAZ,CAAN;AAMAK,MAAAA,KAAK,CAAC,oBAAD,CAAL;AACD,KARD,CAQE,OAAOM,KAAP,EAAc;AACdf,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCc,KAAK,CAACC,OAAzC;AACD;AACF;;AAED,SAAOX,OAAP;AACD,CAzBM;AA2BP,OAAO,MAAMY,IAAI,GAAGlC,QAAQ,CAACkC,IAAT,EAAb;AACP,OAAO,MAAMrB,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB;AAEP,MAAMsB,QAAQ,GAAG,IAAInC,QAAQ,CAACkC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAenC,QAAf","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyDUYN1xZVNRn4hPUnPDDN0_rUFqBp6GeVk\",\r\n    authDomain: \"react-clothing-store-2bafd.firebaseapp.com\",\r\n    databaseURL: \"https://react-clothing-store-2bafd.firebaseio.com\",\r\n    projectId: \"react-clothing-store-2bafd\",\r\n    storageBucket: \"react-clothing-store-2bafd.appspot.com\",\r\n    messagingSenderId: \"844483255354\",\r\n    appId: \"1:844483255354:web:ff6034cecb1610a6816903\",\r\n    measurementId: \"G-TWM731XF4H\"\r\n  };\r\n\r\n  firebase.initializeApp(config);\r\n  \r\n  export const tempRef = async () => {\r\n    const refT = firestore.doc('users/2vt1ZcezDGbmmxX8s7NV8UJVk072');\r\n    const snap = await refT.get();\r\n    console.log('snapppp');\r\n    console.log(snap);\r\n  }\r\n  \r\n  export const createUserProfileDocument = async (userAuth, additionalData) => {\r\n    if (!userAuth) return;\r\n    \r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    console.log(userRef);\r\n    const snapShot = await userRef.get();\r\n    \r\n    if (!snapShot.exists) {\r\n      alert('user snapshot does not exists');\r\n      const { displayName, email } = userAuth;\r\n      const createdAt = new Date();\r\n      try {\r\n        await userRef.set({\r\n          displayName,\r\n          email,\r\n          createdAt,\r\n          ...additionalData\r\n        });\r\n        alert('user ref set after');\r\n      } catch (error) {\r\n        console.log('error creating user', error.message);\r\n      }\r\n    }\r\n  \r\n    return userRef;\r\n  };\r\n  \r\n  export const auth = firebase.auth();\r\n  export const firestore = firebase.firestore();\r\n  \r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n  provider.setCustomParameters({ prompt: 'select_account' });\r\n  export const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n  \r\n  export default firebase;"]},"metadata":{},"sourceType":"module"}